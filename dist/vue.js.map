{"version":3,"file":"vue.js","sources":["../src/util.js","../src/observer/array.js","../src/observer/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["export function isObject(obj){\r\n    // 使用typeof 这里可以将array判断为object；\r\n    return typeof obj === 'object' && obj !== null;\r\n}","\r\n// 我们重写数组方法的目的是：当用户使用部分数组方法操作数据的时候，对需要加以观测的数据进行观测。\r\n// 所以: 1. 不能直接更改数组原型，影响其他Array的使用。\r\n//       2. 重写后的数组，还可以拿到数组所有的方法。\r\n\r\nlet oldArrayMethods = Array.prototype; // 获取数组原型上的方法。\r\n\r\n// 创建一个全新的对象(__proto__指向数组的原型) 可以找到数组原型上所有的方法, 而且修改对象不会影响\r\n// 数组原型方法\r\n\r\nexport let arrayMethods = Object.create(oldArrayMethods);\r\n\r\nlet methods = [ // 这七个方法都会改变原数组， 不改变原数组，我们没必要重写（对数据不产生影响）\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'unshift',\r\n    'sort',\r\n    'reverse',\r\n    'splice'\r\n];\r\n\r\nmethods.forEach(method => {\r\n    arrayMethods[method] = function(...args){ // 函数劫持 AOP的思想\r\n        // 当用户调用数组方法时 会先执行我自己改造的逻辑 在执行数组默认的逻辑\r\n        const ob = this.__ob__;\r\n        let result = oldArrayMethods[method].apply(this,args);\r\n        let inserted;\r\n        console.log('劫持',args)\r\n        // push unshift splice 都可以新增属性 （新增的属性可能是一个对象）,对这种对象Vue,也做了观测\r\n        switch(method){\r\n            case 'push':\r\n            case 'unshift':\r\n                inserted = args;\r\n                break;\r\n            case 'splice':\r\n                inserted = args.slice(2); // splice第三个参数开始才是新增的\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n\r\n        inserted && ob.observeArray(inserted);\r\n\r\n        return result;\r\n\r\n    }\r\n})\r\n\r\n","import {isObject} from '../util.js';\r\nimport {arrayMethods} from './array';\r\n\r\nexport class Observer{\r\n    constructor(data){\r\n        // __ob__ 是数据响应式的标识， 对象和数组都有， 存在则说明该数据已经被观测， 可以作为判断\r\n        Object.defineProperty(data,'__ob__',{\r\n            enumerable: false, // 表示不可枚举\r\n            configurable: false, // 表示不可配置， 不可以改\r\n            value: this\r\n        })\r\n        //data.__ob__ = this; 相当于在数据上可以获取到__ob__这个属性 指代的是Observer的实例,死循环的问题\r\n\r\n        if(Array.isArray(data)){\r\n            // 需要对数组进行特殊处理， 因为我们使用数组一般都是进行列表渲染， 很少用 arr[1] = xxx的情况\r\n            // 不做特殊处理的话， 就会对数组每一项都添加递归添加get set。对大型数据，很影响性能。\r\n\r\n            // 以检索的方式直接更改数据监测不到，Vue放弃检测以索引的方式的改动， 采用 \"函数劫持\" 的方式重写数组的方法。\r\n\r\n            data.__proto__ = arrayMethods; // 改写数组类型的原型链，指向重写的方法。\r\n\r\n            // Vue中可以监测到 [{a:1}] ===> [][0].a = 2 这种情况，简单的说， 数组的中的对象也是可以被监测到的\r\n\r\n            this.observeArray(data);\r\n\r\n        }else{\r\n            this.walk(data);// 对数据每一项都添加get set， 一步步处理\r\n        }\r\n\r\n    }\r\n\r\n    observeArray(data){\r\n        for( let i = 0; i < data.length ; i++){\r\n            observe(data[i]);\r\n        }\r\n    }\r\n\r\n    walk(data){\r\n        // 不要用 for in ，因为会对原型遍历\r\n        Object.keys(data).forEach((key) => {\r\n            defineReactive(data,key,data[key]);\r\n        })\r\n    }\r\n}\r\n\r\n// 这里需要注意的是， 并没有改变被defineProperty重写对象的引用地址，所以重写后\r\n// 还是原来的关系拼接。\r\n// 这也是Vue2.0的性能问题， 递归重写get set， Vue3.0使用proxy\r\nfunction defineReactive(data,key,value){\r\n    observe(value); // 如果传入的值还是一个对象，就做递归循环检测\r\n    Object.defineProperty(data,key,{\r\n        get(){\r\n            return value;\r\n        },\r\n        set(newValue){\r\n            if(value === newValue) return;\r\n            observe(newValue); // 用户设置的值也可能是引用类型，也需要检测\r\n            value = newValue;\r\n        }\r\n    })\r\n}\r\n\r\nexport function observe(data){\r\n    // 如果传入的数据是 非obj 或者 null时直接返回， 这么判断是基于初始是一个对象或者数组\r\n    // 基本数据类型被上一层引用数据类型使用defineProperty改写， 添加了get set\r\n    if(!isObject(data)){\r\n        return;\r\n    }\r\n    // 使用defineProperty进行重写\r\n    return new Observer(data);\r\n}\r\n","import { observe,Observer } from './observer/index';\r\nexport function initState(vm){\r\n    const opts = vm.$options;\r\n    if(opts.props){\r\n        initProps(vm);\r\n    }\r\n    if(opts.methods){\r\n        initMethods(vm);\r\n    }\r\n    if(opts.data){\r\n        initData(vm);\r\n    }\r\n}\r\n\r\nfunction initProps(){};\r\nfunction initMethods(){};\r\n\r\nfunction proxy(vm,source,key){\r\n    Object.defineProperty(vm,key,{\r\n        get(){\r\n            return vm[source][key]\r\n        },\r\n        set(newValue){\r\n            vm[source][key] = newValue;\r\n        }\r\n    })\r\n}\r\n\r\nfunction initData(vm){\r\n    // 数据响应式原理\r\n    let data = vm.$options.data;\r\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;\r\n\r\n    if(data.__ob__ instanceof Observer){ // 防止数据被多次观测\r\n        return ;\r\n    }\r\n\r\n    for(let key in data){\r\n        proxy(vm,'_data',key);\r\n    }\r\n\r\n    // 观察数据\r\n    observe(data);\r\n};\r\n","import {initState} from './state';\r\nexport function initMixin(Vue){\r\n    Vue.prototype._init = function(options){\r\n        // Vue的内部 $options 就是用户传递的所有参数\r\n        const vm = this;\r\n        vm.$options = options;\r\n        // 初始化状态\r\n        initState(vm);\r\n    };\r\n}","import { initMixin } from './init';\r\nfunction Vue(options){\r\n    // 一个Vue实例生成，最先要做初始化操作；\r\n    this._init(options); // 整个项目的初始化\r\n}\r\n// 给Vue的原型链上混入初始化方法\r\ninitMixin(Vue);\r\n\r\n\r\nexport default Vue;"],"names":["isObject","obj","oldArrayMethods","Array","prototype","arrayMethods","Object","create","methods","forEach","method","ob","__ob__","args","result","apply","inserted","console","log","slice","observeArray","Observer","data","defineProperty","enumerable","configurable","value","isArray","__proto__","walk","i","length","observe","keys","key","defineReactive","get","set","newValue","initState","vm","opts","$options","props","initData","proxy","source","_data","call","initMixin","Vue","_init","options"],"mappings":"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"}